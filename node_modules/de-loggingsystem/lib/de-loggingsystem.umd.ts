(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = global || self, factory(global['de-loggingsystem'] = {}));
}(this, function (exports) { 'use strict';

    /**
     * Error codes
     */
    (function (ErrorCode) {
        ErrorCode[ErrorCode["OK"] = 0] = "OK";
        ErrorCode[ErrorCode["Error"] = 1] = "Error";
        ErrorCode[ErrorCode["DocumentUndefined"] = 2] = "DocumentUndefined";
        ErrorCode[ErrorCode["NoName"] = 3] = "NoName";
        ErrorCode[ErrorCode["EngineInitialization"] = 100] = "EngineInitialization";
        ErrorCode[ErrorCode["EngineFailed"] = 101] = "EngineFailed";
        ErrorCode[ErrorCode["EngineInstanceNull"] = 102] = "EngineInstanceNull";
        ErrorCode[ErrorCode["EngineInstanceNotNull"] = 103] = "EngineInstanceNotNull";
        ErrorCode[ErrorCode["EngineInstanceUndefined"] = 104] = "EngineInstanceUndefined";
        ErrorCode[ErrorCode["EngineClientNotSet"] = 105] = "EngineClientNotSet";
        ErrorCode[ErrorCode["EngineWindowUndefined"] = 106] = "EngineWindowUndefined";
        ErrorCode[ErrorCode["EngineStartedEarly"] = 107] = "EngineStartedEarly";
        ErrorCode[ErrorCode["EngineRunning"] = 108] = "EngineRunning";
        ErrorCode[ErrorCode["EngineNotRunning"] = 109] = "EngineNotRunning";
        ErrorCode[ErrorCode["EngineCleanupFailed"] = 110] = "EngineCleanupFailed";
        ErrorCode[ErrorCode["ContainerUndefined"] = 111] = "ContainerUndefined";
        ErrorCode[ErrorCode["WebGLNotInitialized"] = 112] = "WebGLNotInitialized";
        ErrorCode[ErrorCode["DataTypeNotRecognized"] = 113] = "DataTypeNotRecognized";
        ErrorCode[ErrorCode["MessageSystemInitialization"] = 200] = "MessageSystemInitialization";
        ErrorCode[ErrorCode["MessageSystemUndefined"] = 201] = "MessageSystemUndefined";
        ErrorCode[ErrorCode["DuplicateListener"] = 202] = "DuplicateListener";
        ErrorCode[ErrorCode["UnsubscribeFailed"] = 203] = "UnsubscribeFailed";
        ErrorCode[ErrorCode["MessageRecieverNotFound"] = 204] = "MessageRecieverNotFound";
        ErrorCode[ErrorCode["FailedAddingListener"] = 205] = "FailedAddingListener";
        ErrorCode[ErrorCode["ListenerUndefined"] = 206] = "ListenerUndefined";
        ErrorCode[ErrorCode["BrowserWindowUndefined"] = 300] = "BrowserWindowUndefined";
        ErrorCode[ErrorCode["BrowserWindowDidNotClose"] = 301] = "BrowserWindowDidNotClose";
        ErrorCode[ErrorCode["ZoneUndefined"] = 400] = "ZoneUndefined";
        ErrorCode[ErrorCode["ZoneHasNoObjects"] = 401] = "ZoneHasNoObjects";
        ErrorCode[ErrorCode["ZoneDoesNotExist"] = 402] = "ZoneDoesNotExist";
        ErrorCode[ErrorCode["ZoneID"] = 403] = "ZoneID";
        ErrorCode[ErrorCode["ZoneDescription"] = 404] = "ZoneDescription";
        ErrorCode[ErrorCode["SceneUndefined"] = 405] = "SceneUndefined";
        ErrorCode[ErrorCode["SceneNameUndefined"] = 406] = "SceneNameUndefined";
        ErrorCode[ErrorCode["SceneManagerUndefined"] = 407] = "SceneManagerUndefined";
        ErrorCode[ErrorCode["SceneManagerCleanupFailed"] = 408] = "SceneManagerCleanupFailed";
        ErrorCode[ErrorCode["EntityInitialization"] = 500] = "EntityInitialization";
        ErrorCode[ErrorCode["EntityParentUndefined"] = 501] = "EntityParentUndefined";
        ErrorCode[ErrorCode["EntityAlreadyHasChild"] = 502] = "EntityAlreadyHasChild";
        ErrorCode[ErrorCode["EntityAlreadyHasComponent"] = 503] = "EntityAlreadyHasComponent";
        ErrorCode[ErrorCode["EntityChildNotFound"] = 504] = "EntityChildNotFound";
        ErrorCode[ErrorCode["EntityComponentNotFound"] = 505] = "EntityComponentNotFound";
        ErrorCode[ErrorCode["NoPosition"] = 506] = "NoPosition";
        ErrorCode[ErrorCode["NoStartPosition"] = 507] = "NoStartPosition";
        ErrorCode[ErrorCode["NoEndPosition"] = 508] = "NoEndPosition";
        ErrorCode[ErrorCode["NoDirection"] = 509] = "NoDirection";
        ErrorCode[ErrorCode["NoPlayerCollisionComponentName"] = 510] = "NoPlayerCollisionComponentName";
        ErrorCode[ErrorCode["NoGroundCollisionComponentName"] = 511] = "NoGroundCollisionComponentName";
        ErrorCode[ErrorCode["NoEnemyCollisionComponentName"] = 512] = "NoEnemyCollisionComponentName";
        ErrorCode[ErrorCode["NoFlagCollisionComponentName"] = 513] = "NoFlagCollisionComponentName";
        ErrorCode[ErrorCode["RenderSystemUndefined"] = 600] = "RenderSystemUndefined";
        ErrorCode[ErrorCode["RenderSystemInitializationFailed"] = 601] = "RenderSystemInitializationFailed";
        ErrorCode[ErrorCode["CanvasNotFound"] = 602] = "CanvasNotFound";
        ErrorCode[ErrorCode["CanvasNotDefined"] = 603] = "CanvasNotDefined";
        ErrorCode[ErrorCode["ShaderType"] = 604] = "ShaderType";
        ErrorCode[ErrorCode["ShaderLoad"] = 605] = "ShaderLoad";
        ErrorCode[ErrorCode["WebGLBuffer"] = 606] = "WebGLBuffer";
        ErrorCode[ErrorCode["WebGLBufferNotCreated"] = 607] = "WebGLBufferNotCreated";
        ErrorCode[ErrorCode["WebGLProgram"] = 608] = "WebGLProgram";
        ErrorCode[ErrorCode["RenderSystemCleanupFailed"] = 609] = "RenderSystemCleanupFailed";
        ErrorCode[ErrorCode["SceneNotFound"] = 610] = "SceneNotFound";
        ErrorCode[ErrorCode["SceneNotActive"] = 611] = "SceneNotActive";
        ErrorCode[ErrorCode["SceneTimedOut"] = 612] = "SceneTimedOut";
        ErrorCode[ErrorCode["SpriteNotAttached"] = 613] = "SpriteNotAttached";
        ErrorCode[ErrorCode["GLUtilityNotInitialized"] = 614] = "GLUtilityNotInitialized";
        ErrorCode[ErrorCode["NoAnimatedSpriteName"] = 615] = "NoAnimatedSpriteName";
        ErrorCode[ErrorCode["NoFrameWidth"] = 616] = "NoFrameWidth";
        ErrorCode[ErrorCode["NoFrameHeight"] = 617] = "NoFrameHeight";
        ErrorCode[ErrorCode["NoFrameCount"] = 618] = "NoFrameCount";
        ErrorCode[ErrorCode["NoFrameSequence"] = 619] = "NoFrameSequence";
        ErrorCode[ErrorCode["PhysicsSystemUndefined"] = 700] = "PhysicsSystemUndefined";
        ErrorCode[ErrorCode["NoShape"] = 701] = "NoShape";
        ErrorCode[ErrorCode["NoShapeType"] = 702] = "NoShapeType";
        ErrorCode[ErrorCode["ShapeNotAllowed"] = 703] = "ShapeNotAllowed";
        ErrorCode[ErrorCode["NoRadius"] = 704] = "NoRadius";
        ErrorCode[ErrorCode["NoWidth"] = 705] = "NoWidth";
        ErrorCode[ErrorCode["NoHeight"] = 706] = "NoHeight";
        ErrorCode[ErrorCode["SoundSystemUndefined"] = 900] = "SoundSystemUndefined";
        ErrorCode[ErrorCode["SoundName"] = 901] = "SoundName";
        ErrorCode[ErrorCode["WindowUndefined"] = 900] = "WindowUndefined";
        ErrorCode[ErrorCode["GameWindowUndefined"] = 901] = "GameWindowUndefined";
        ErrorCode[ErrorCode["NotElectronWindow"] = 902] = "NotElectronWindow";
        ErrorCode[ErrorCode["IOSystemUndefined"] = 1000] = "IOSystemUndefined";
        ErrorCode[ErrorCode["AssetLoaderUninitialized"] = 1100] = "AssetLoaderUninitialized";
        ErrorCode[ErrorCode["AssetManagerUndefined"] = 1101] = "AssetManagerUndefined";
        ErrorCode[ErrorCode["NoFileExtension"] = 1102] = "NoFileExtension";
        ErrorCode[ErrorCode["JSONDataUndefined"] = 1103] = "JSONDataUndefined";
        ErrorCode[ErrorCode["LoadAssetFailed"] = 1104] = "LoadAssetFailed";
        ErrorCode[ErrorCode["NoAssetName"] = 1105] = "NoAssetName";
        ErrorCode[ErrorCode["FileTypeNotAcceptable"] = 1106] = "FileTypeNotAcceptable";
        ErrorCode[ErrorCode["AssetManagerDidNotGetAsset"] = 1107] = "AssetManagerDidNotGetAsset";
        ErrorCode[ErrorCode["TextureNotLoaded"] = 1108] = "TextureNotLoaded";
        ErrorCode[ErrorCode["ErrorLoadingFile"] = 1109] = "ErrorLoadingFile";
        ErrorCode[ErrorCode["ReadJSONFile"] = 1110] = "ReadJSONFile";
        ErrorCode[ErrorCode["WriteJSONFile"] = 1111] = "WriteJSONFile";
        ErrorCode[ErrorCode["FileContentsNotRead"] = 1112] = "FileContentsNotRead";
        ErrorCode[ErrorCode["MissingTypeBuilder"] = 1113] = "MissingTypeBuilder";
        ErrorCode[ErrorCode["TypeUndefined"] = 1114] = "TypeUndefined";
        ErrorCode[ErrorCode["NoActions"] = 1115] = "NoActions";
        ErrorCode[ErrorCode["NoCursor"] = 1116] = "NoCursor";
        ErrorCode[ErrorCode["NoButtons"] = 1117] = "NoButtons";
    })(exports.ErrorCode || (exports.ErrorCode = {}));

    /**
     * Logging levels
     *
     * * Info is for developer and player information; general warnings and calls.
     * * Debug is for developer information only; for debugging purposes and not shipped in the final version.
     * * Warning is for developer and player; this is information that is handled, but should not be occuring normally.
     * * Error is for developer and player; this is for engine errors that are handled but will cause weird
     * results with the engine's running.
     * * Critical is for developer and player; this is when the engine will crash. Errors here should throw an error, or
     * handle an error and throw a new one. This is when the engine cannot continue running in any curcumstance.
     */
    (function (LogLevel) {
        LogLevel[LogLevel["info"] = 0] = "info";
        LogLevel[LogLevel["debug"] = 1] = "debug";
        LogLevel[LogLevel["warning"] = 2] = "warning";
        LogLevel[LogLevel["error"] = 3] = "error";
        LogLevel[LogLevel["critical"] = 4] = "critical";
    })(exports.LogLevel || (exports.LogLevel = {}));

    /**
     * Logging system. This is a simple command that takes the log level and prints to the console based on the level. Has
     * some other general error functionality that can be super useful. Follows some general conventions about different
     * error levels.
     *
     * For debugging, the code will check `process.env.NODE_DEBUG` to run or not. Production code should have this set to
     * false.
     * @param  {LogLevel} level
     * @param  {ErrorCode} ec
     * @param  {string} message
     * @returns string
     */
    function log(level, message, ec) {
        if (ec === undefined)
            ec = exports.ErrorCode.OK;
        var errorString = "";
        switch (level) {
            case exports.LogLevel.info:
                // tslint:disable-next-line: max-line-length
                // NOTE: Information to be displayed for the user. This is helpful information for the user about the game itself.
                errorString = `Info\t${message}`;
                console.log("\t", "\x1b[32m", errorString, "\x1b[0m");
                break;
            case exports.LogLevel.debug:
                // NOTE: This is debug information only. To be run in verbose mode when running the engine.
                if (process.env.NODE_DEBUG === "true") {
                    errorString = `Debug\t|| ${ec} ${exports.ErrorCode[ec]}: ${message}`;
                    console.log("\t", "\x1b[34m", errorString, "\x1b[0m");
                }
                break;
            case exports.LogLevel.warning:
                // tslint:disable-next-line: max-line-length
                // NOTE: The engine can still run, but there are things that are missing that MAY cause issues.
                errorString = `Warn\t|| ${ec} ${exports.ErrorCode[ec]}: ${message}`;
                console.log("\t", "\x1b[33m", errorString, "\x1b[0m");
                break;
            case exports.LogLevel.error:
                // NOTE: The engine may start to break and can cause serious issues.
                errorString = `Error\t|| ${ec} ${exports.ErrorCode[ec]}: ${message}`;
                console.error("\t", "\x1b[31m", errorString, "\x1b[0m");
                break;
            case exports.LogLevel.critical:
                // tslint:disable-next-line: max-line-length
                // NOTE: At this stage, the engine will break and should stop running immediately if these logs are thrown.
                errorString = `Critical!! || ${ec} ${exports.ErrorCode[ec]}: ${message}`;
                console.error("\t", "\x1b[30m", "\x1b[41m", errorString, "\x1b[0m");
                throw new Error(errorString);
            default:
                throw new Error("Something terrible happened or that logging level is not allowed.");
        }
        return errorString;
    }

    exports.log = log;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
